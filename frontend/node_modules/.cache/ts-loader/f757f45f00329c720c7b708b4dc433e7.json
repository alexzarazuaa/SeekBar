{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js!/app/node_modules/ts-loader/index.js??ref--14-2!/app/node_modules/eslint-loader/index.js??ref--13-0!/app/src/store/auth.module.ts","dependencies":[{"path":"/app/src/store/auth.module.ts","mtime":1621005038715},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/app/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/app/node_modules/eslint-loader/index.js??ref--13-0!/app/src/store/auth.module.ts"],"names":[],"mappings":"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","sourcesContent":["import ApiService, { ProfileService, RegisterService, UserService } from \"@/common/api.service\";\nimport JwtService from \"@/common/jwt.service\";\nimport { ActionsType } from \"./actions.type\";\nimport { MutationsType } from \"./mutations.type\";\n\nconst state = {\n  errors: null,\n  user: {},\n  isAuthenticated: !!JwtService.getToken(),\n};\n\nconst getters = {\n  currentUser(state: any) {\n    return state.user;\n  },\n  isAuthenticated(state: any) {\n    return state.isAuthenticated;\n  },\n};\n\nconst actions = {\n  // Login\n  async [ActionsType.LOGIN](context: any, credentials: any) {\n    await ApiService.post(\"users/login\", { user: credentials })\n      .then(({ data }) => {\n        context.commit(MutationsType.SET_AUTH, data.user);\n      })\n      .catch(({ response }) => {\n        context.commit(MutationsType.SET_ERROR, response.data.errors);\n      });\n  },\n\n  // Logout\n  async  [ActionsType.LOGOUT](context: any) {\n    await context.commit(MutationsType.PURGE_AUTH);\n  },\n\n  // Register\n  async [ActionsType.REGISTER](context: any, credentials: any) {\n    await RegisterService.register(credentials.type, { user: credentials })\n      .then(({ data }) => {\n        context.commit(MutationsType.SET_AUTH, data.user);\n      })\n      .catch(({ response }) => {\n        context.commit(MutationsType.SET_ERROR, response.data.errors);\n      });\n  },\n\n  // Desactivate\n  async [ActionsType.DESACTIVATE](context: any, credentials: any) {\n    const { data } = await ApiService.delete(\"users/login\", credentials)\n    context.commit(MutationsType.SET_AUTH, data.user);\n\n  },\n\n\n  // ACTIVATE\n  async [ActionsType.ACTIVATE](context: any, credentials: any) {\n    const { data } = await ApiService.update(\"users/login\", credentials)\n  },\n\n  // Check auth\n  async [ActionsType.CHECK_AUTH](context: any, credentials: any) {\n    if (JwtService.getToken()) {\n      ApiService.setHeader();\n      await UserService.getUser(\"user\")\n        .then(({ data }) => {\n          context.commit(MutationsType.SET_AUTH, data.user);\n        })\n        .catch(({ response }) => {\n          context.commit(MutationsType.SET_ERROR, response.data.errors);\n        });\n    } else {\n      context.commit(MutationsType.PURGE_AUTH);\n    }\n  },\n\n\n\n\n};\n\n\nconst mutations = {\n  // Set error\n  [MutationsType.SET_ERROR](state: any, error: any) {\n    state.errors = error;\n  },\n\n  // Set auth\n  [MutationsType.SET_AUTH](state: any, user: any) {\n    state.isAuthenticated = true;\n    state.user = user;\n    state.errors = {};\n    JwtService.saveToken(state.user.token);\n  },\n\n  // Purge auth\n  [MutationsType.PURGE_AUTH](state: any) {\n    state.isAuthenticated = false;\n    state.user = {};\n    state.errors = {};\n    JwtService.destroyToken();\n  },\n};\n\nexport default {\n  state,\n  actions,\n  mutations,\n  getters,\n};\n"],"sourceRoot":""}]}